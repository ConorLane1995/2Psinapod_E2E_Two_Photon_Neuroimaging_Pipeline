"""
Find frequency-sensitive cells by running an ANOVA on the trial activity where one factor is frequency as was done in Gaucher et al 2020 (eLife)
INPUT: cell_dictionary, recording_info
OUTPUT: cell_dictionary with additional key ('active') denoting whether the cell was considered frequency sensitive (T/F value)
AUTHOR: Veronica Tarka, May 2022, veronica.tarka@mail.mcgill.ca
"""

import statsmodels.api as sm
from statsmodels.formula.api import ols
import pandas as pd
import numpy as np
import pickle
import json
import os

# load what we need from the config file
with open(os.path.abspath(os.path.dirname(__file__)) +'/../../config.json','r') as f:
    config = json.load(f)

BASE_PATH = config['RecordingFolder'] # folder with all of the files generated by Suite2P for this recording (F.npy, iscell.npy, etc)
TRACES_FILE = config['AnalysisFile']
OUTPUT_FILE = TRACES_FILE

"""
Format the trials into a pandas dataframe as is expected by the ols method used for the ANOVA
@param cell_trace: a single cell's trials (the content of 'traces' in the big cell dictionary)
@param nFreq: the number of unique frequencies presented
@param nItsy: the number of unique intensities presented
@param nReps: the number of times a unique frequency/intensity pairing was presented
@return df: a dataframe formatted such that 'activity' will store the dependent variable, and 'frequency' and 'intensity' make the two factors of the ANOVA
"""
def make_pd_df_from_dict(cell_trace,nFreq,nItsy,nReps):
    # store the average value of each trial into the appropriate index of the data frame
    evoked_activity = np.empty(shape=(nFreq*nItsy*nReps))

    idx_counter = 0
    for freq in cell_trace:
        for itsy in cell_trace[freq]:
            for i,rep in enumerate(cell_trace[freq][itsy]):
                if i >= 10:
                    break
                trial_activity = cell_trace[freq][itsy][rep][5:]
                trial_avg = np.average(trial_activity) # average all the activity in a single trial together
                evoked_activity[idx_counter] = trial_avg # add the trial average to the activity list
                idx_counter += 1

    # renaming the frequencies and intensities to be linearly increasing (1,2,3,4,...) to be simpler for the ANOVA
    frequencies = range(1,nFreq+1)
    intensities = range(1,nItsy+1)

    # format the dataframe for the ANOVA
    df = pd.DataFrame({'frequency': np.repeat(frequencies,nReps),
    'intensity': np.tile(np.repeat(intensities,nReps),nFreq),
    'activity':evoked_activity})

    return df

def main():
    # import our recordings
    # it's formatted like this: 
    # cell { traces { freq { intensity { repetition: trace = [x,x,x,x,...] }}}}
    with open(BASE_PATH + TRACES_FILE, 'rb') as f:
        cell_dictionary = pickle.load(f)

    # load information about our recording and stimuli
    with open(BASE_PATH + "recording_info.pkl",'rb') as f:
        recording_info = pickle.load(f)

    # extract numbers from the recording info we need later on
    nFreq = len(recording_info['frequencies'])
    nItsy = len(recording_info['intensities'])
    nReps = recording_info['nRepeats']
    

    active_cell_counter = 0 # initialize a counter for the number of responsive cells we find
    for cell in cell_dictionary: # for each cell
        df = make_pd_df_from_dict(cell_dictionary[cell]['deconvolved_traces'],nFreq,nItsy,nReps)

        model = ols('activity ~ C(frequency)', data=df).fit()

        results = sm.stats.anova_lm(model, typ=2)

        # if the main effect of frequency was significant, we count the cell as responsive
        if (results['PR(>F)']['C(frequency)'] < 0.05):
            active_cell_counter += 1
            cell_dictionary[cell]['active'] = True
            cell_dictionary[cell]['p_value'] = results['PR(>F)']['C(frequency)']
        else:
            cell_dictionary[cell]['active'] = False
            cell_dictionary[cell]['p_value'] = results['PR(>F)']['C(frequency)']


    print("Number of total cells: ")
    print(len(cell_dictionary))
    print("Number of active cells: ")
    print(active_cell_counter)

    # save the dictionary with the added key ('active') to the same file
    with open(BASE_PATH+OUTPUT_FILE,'wb') as f:
        pickle.dump(cell_dictionary,f)

if __name__=="__main__":
    main()